import React, {Component} from 'react';
import {TodoBanner} from './TodoBanner';
import {TodoCreator} from './TodoCreator'
import { TodoRow} from './TodoRow'
import {VisibilityControl} from './VisibilityControl'

//react component named App, components are the mian building blocks for react applications
export default class App extends Component {
  constructor(props){
    super(props);
    this.state ={
      userName: "Adam", 
      todoItems: [{action: "Buy Flowers", done: false},
                  {action: "Get Shoes", done: false},
                  {action: "Collect Tickets", done: true},
                  {action: "Call Joe", done: false}],
                showCompleted: true
    }
  }
  updateNewTextValue = (event)=>{
    this.setState({newItemText: event.target.value});
  }
  createNewTodo =(task)=>{
    if(!this.state.todoItems
      .find(item => item.action === task)) {
        this.setState({
        todoItems: [...this.state.todoItems,
        {action: task, done: false}],
        newItemText: ""
      });
    }
  }
  toggleTodo = (todo)=> this.setState({todoItems:
    this.state.todoItems.map(item => item.action === todo.action ? {...item, done: !item.done}: item)
  })
// by using map you are using a javascript method to return html content, each item in the array is mapped to a tr element in the HTML table cells, the html content that comes from the map method creates even more JS expressions that populate the td elements with state data values or functions that will be invoked to handle an event
  todoTableRows =(doneValue) => this.state.todoItems.filter(item=> item.done=== doneValue).map(item=> 
    <TodoRow key = {item.action} item={item} callback={this.toggleTodo}/>)
  //   // react invokes component render method when ther is a change and compares results with the html that is displayed in the browser so that only the differences are applied, react requires the key prop so that it can correlate the content is diplayed with the data that produced it and manage changes efficientlys
  //   // each to-do item is diplayed with a checkbox that the user toggles to indicate that the task is complete, each table row generated by the todoTableRows method contains an input element configured as a checkbox
  //   <tr key={item.action}>
  //     <td>{item.action}</td>
  //     <td>
  //       <input type="checkbox" checked={item.done}
  //       // allows for checkbox to be toggled and changes the amount of items todo list count
  //       onChange={ ()=> this.toggleTodo(item)}/>
  //     </td>
  //   </tr>);
  // changeStateData = ()=>{
  //   this.setState({
  //     userName: this.state.userName === "Adam" ? "Bob" : "Adam"
  //   })
  // }
  render=()=>
   
      <div>
        <TodoBanner name={this.state.userName} tasks={this.state.todoItems}/>

        <div className="container-fluid">
          <TodoCreator callback={this.createNewTodo}/>         
             <table className="table table-striped table-bordered">
            <thead>
              <tr><th>Description</th><th>Done</th></tr>
            </thead>
            <tbody>{this.todoTableRows(false)}</tbody>
            </table>
            <div className="bg-secondary text-white text-center p-2">
              <VisibilityControl description="Completed Tasks"
              isChecked={this.state.showCompleted}
              callback={(checked)=>
              this.setState({showCompleted:checked})}/>
            </div>
            {this.state.showCompleted && <table className="table table-striped table-bordered">
              <thead>
                <tr><th>Description</th><th>Done</th></tr></thead>
              <tbody>{this.todoTableRows(true)}</tbody>
          </table>
}
        </div>
       
      </div>
 
}


